#Login to Aws
provider "aws" {
  access_key = var.aws_access_key
  secret_key = var.aws_secret_key
  region     = var.aws_region
}

#Vpc
resource "aws_vpc" "test_vpc" {
  cidr_block       = "10.1.0.0/16"
  instance_tenancy = "dedicated"
  #enable_dns_hostnames = true
  #enable_dns_support   = true

  tags = {
    Name = "test_vpc"
  }
}

#internet gateway
resource "aws_internet_gateway" "test_igw" {
  vpc_id = aws_vpc.test_vpc.id

  tags = {
    Name = "test_igw"
  }
}

#Route tables
resource "aws_route_table" "test_public_rt" {
  vpc_id = aws_vpc.test_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.test_igw.id
  }

  tags = {
    Name = "test_public_rt"
  }
}

resource "aws_default_route_table" "test_private_rt" {
  default_route_table_id = aws_vpc.test_vpc.default_route_table_id

  tags = {
    Name = "test_private_rt"
  }
}

#Subnet
resource "aws_subnet" "test_public1" {
  vpc_id                  = aws_vpc.test_vpc.id
  cidr_block              = var.cidrs["public1"]
  map_public_ip_on_launch = true
  availability_zone       = data.aws_availability_zones.available.names[0]

  tags = {
    Name = "test_public1"
  }
}

resource "aws_subnet" "test_private1" {
  vpc_id                  = aws_vpc.test_vpc.id
  cidr_block              = var.cidrs["private1"]
  map_public_ip_on_launch = false
  availability_zone       = data.aws_availability_zones.available.names[0]

  tags = {
    Name = "test_private1"
  }
}

resource "aws_subnet" "test_rds1" {
  vpc_id                  = aws_vpc.test_vpc.id
  cidr_block              = var.cidrs["rds1"]
  map_public_ip_on_launch = false
  availability_zone       = data.aws_availability_zones.available.names[0]

  tags = {
    Name = "test_rds1"
  }
}

#Subnet association 
resource "aws_route_table_association" "test_public1_assoc" {
  subnet_id      = aws_subnet.test_public1.id
  route_table_id = aws_route_table.test_public_rt.id
}

resource "aws_route_table_association" "test_private1_assoc" {
  subnet_id      = aws_subnet.test_private1.id
  route_table_id = aws_route_table.test_public_rt.id
}

#subnet group to add more database
resource "aws_db_subnet_group" "test_rds_sng" {
  name       = "rds_subnetgroup"
  subnet_ids = [aws_subnet.test_rds1.id]

  tags = {
    Name = "test_rds_sng"
  }
}

#Security groups
resource "aws_security_group" "test_public_sg" {
  name        = "sg_public"
  description = "elastic load balancer public access.currently allowing from one ip and for public used cidr 0.0.0.0/0"
  vpc_id      = aws_vpc.test_vpc.id

  #SSH

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["${var.localip}"]
  }

  #HTTP

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  #Outbound internet access

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

#Private Security Group
resource "aws_security_group" "test_private_sg" {
  name        = "sg_private"
  description = "Used for private instances"
  vpc_id      = aws_vpc.test_vpc.id

  # Access from other security groups

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["10.1.0.0/16"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

#RDS Security Group
resource "aws_security_group" "test_rds_sg" {
  name        = "sg_rds"
  description = "Used for DB instances"
  vpc_id      = aws_vpc.test_vpc.id

  # SQL access from public/private security group

  ingress {
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = [aws_security_group.test_private_sg.id]
  }
}

#rds instance
resource "aws_db_instance" "test_db" {
  allocated_storage      = 1
  engine                 = "postgres"
  engine_version         = "11"
  instance_class         = var.db_instance_class
  name                   = var.dbname
  username               = var.dbuser
  password               = var.dbpassword
  db_subnet_group_name   = aws_db_subnet_group.test_rds_sng.name
  vpc_security_group_ids = [aws_security_group.test_rds_sg.id]
  skip_final_snapshot    = true
}

# key pair
resource "aws_key_pair" "test_auth" {
  key_name   = var.key_name
  public_key = "${file(var.public_key_path)}"
}

#server instance
resource "aws_instance" "test_dev" {
  instance_type = var.dev_instance_type
  ami           = var.dev_ami

  tags = {
    Name = "test_dev"
  }

  key_name               = aws_key_pair.test_auth.id
  vpc_security_group_ids = [aws_security_group.test_private_sg.id]
  subnet_id              = aws_subnet.test_private1.id

  provisioner "local-exec" {
    command = <<EOD
cat <<EOF > aws_hosts
[dev]
${aws_instance.test_dev.public_ip}
EOF
EOD
  }

  provisioner "local-exec" {
    command = "aws ec2 wait instance-status-ok --instance-ids ${aws_instance.test_dev.id} && ansible-playbook -i aws_hosts testyaml.yml"
  }
}

#ELB
resource "aws_elb" "test_elb" {
  name = "${var.domain_name}-elb"

  subnets = ["${aws_subnet.test_public1.id}"]

  security_groups = ["${aws_security_group.test_public_sg.id}"]

  listener {
    instance_port     = 80
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }

  health_check {
    healthy_threshold   = "${var.elb_healthy_threshold}"
    unhealthy_threshold = "${var.elb_unhealthy_threshold}"
    timeout             = "${var.elb_timeout}"
    target              = "TCP:80"
    interval            = "${var.elb_interval}"
  }

  cross_zone_load_balancing   = true
  idle_timeout                = 400
  connection_draining         = true
  connection_draining_timeout = 400

  tags = {
    Name = "test_${var.domain_name}-elb"
  }
}
